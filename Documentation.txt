## API Endpoints

### Authentification
- POST /api/auth/register
  - Description : Inscription d'un nouvel utilisateur
  - Corps de la requête : { "name": "string", "email": "string", "password": "string", "phone": "string" }
  - Réponse : { "token": "string" }

- POST /api/auth/login
  - Description : Connexion d'un utilisateur existant
  - Corps de la requête : { "email": "string", "password": "string" }
  - Réponse : { "token": "string" }

### Produits
- GET /api/products
  - Description : Liste tous les produits
  - Paramètres de requête optionnels : 
    - page (défaut: 1)
    - limit (défaut: 10)
    - category (filtre par catégorie)
  - Réponse : { "products": [...], "totalPages": number, "currentPage": number }

- POST /api/products
  - Description : Crée un nouveau produit
  - Corps de la requête : { "name": "string", "description": "string",
   "price": number, "stock": number, "category": "string" }
  - Réponse : { "product": {...} }

- GET /api/products/:id
  - Description : Récupère un produit spécifique
  - Paramètres de chemin : id (ID du produit)
  - Réponse : { "product": {...} }

- PUT /api/products/:id
  - Description : Met à jour un produit existant
  - Paramètres de chemin : id (ID du produit)
  - Corps de la requête : { "name": "string", "description": "string", "price": number, "stock": number, "category": "string" }
  - Réponse : { "product": {...} }

- DELETE /api/products/:id
  - Description : Supprime un produit
  - Paramètres de chemin : id (ID du produit)
  - Réponse : { "message": "Produit supprimé avec succès" }

### Paiements
- POST /api/payments/create-payment-intent
  - Description : Crée une intention de paiement
  - Corps de la requête : { "amount": number, "currency": "string" }
  - Réponse : { "clientSecret": "string" }

- GET /api/payments/payment-success
  - Description : Gère le succès du paiement
  - Paramètres de requête : session_id (ID de la session de paiement Stripe)
  - Réponse : { "message": "Paiement réussi" }

- GET /api/payments/payment-cancel
  - Description : Gère l'annulation du paiement
  - Réponse : { "message": "Paiement annulé" }

Note : Tous les endpoints, à l'exception de /api/auth/register et /api/auth/login, nécessitent un token JWT valide dans l'en-tête Authorization de la requête.

////////////////////////////////////////////////////////////////////////////////////////

# Cimpay - Plateforme de Paiement en Ligne

## Description du Projet 

Cimpay est une plateforme de paiement en ligne sécurisée conçue pour faciliter les transactions électroniques pour les entreprises et les particuliers. Cette application offre une API robuste pour l'intégration des paiements, la gestion des utilisateurs, des produits et des commandes.

## Fonctionnalités Principales

1. Authentification des utilisateurs
2. Gestion des produits
3. Traitement des paiements
4. Gestion des commandes
5. API RESTful

## Architecture Technique

- Backend : Node.js avec Express.js
- Base de données : MongoDB avec Mongoose ODM
- Authentification : JSON Web Tokens (JWT)
- Paiements : Intégration Stripe

## Structure du Projet

cimpay/
│
├── server/
│   ├── server.js
│   ├── routes/
│   ├── models/
│   ├── middleware/
│   ├── utils/
│   ├── controllers/
│   └── config/
│
├── .env
├── package.json
└── README.md

## Modèles de Données

1. User
   - _id: Number (auto-incrémenté)
   - name: String
   - email: String (unique)
   - password: String (hashed)
   - phone: String

2. Product
   - _id: Number (auto-incrémenté)
   - name: String
   - description: String
   - price: Number
   - stock: Number
   - category: String

3. Order
   - _id: Number (auto-incrémenté)
   - userId: Number (référence à User)
   - products: Array of { productId: Number, quantity: Number }
   - totalAmount: Number
   - status: String

4. Payment
   - _id: Number (auto-incrémenté)
   - orderId: Number (référence à Order)
   - userId: Number (référence à User)
   - amount: Number
   - status: String (enum: ['completed', 'pending', 'failed'])
   - transactionId: String

5. Counter
   - _id: String
   - seq: Number

## API Endpoints

### Authentification
- POST /api/auth/register
- POST /api/auth/login

### Produits
- GET /api/products
- POST /api/products
- GET /api/products/:id
- PUT /api/products/:id
- DELETE /api/products/:id

### Paiements
- POST /api/payments/create-payment-intent
- GET /api/payments/payment-success
- GET /api/payments/payment-cancel

### Commandes (à implémenter)
- POST /api/orders
- GET /api/orders
- GET /api/orders/:id

## Nouveautés et Mises à Jour

1. Auto-incrémentation des IDs
   - Tous les modèles (User, Product, Order, Payment) utilisent maintenant des IDs numériques auto-incrémentés.
   - Un modèle Counter a été ajouté pour gérer les séquences d'IDs.

2. Utilitaires
   - utils/counter.js : Gère l'auto-incrémentation des IDs.
   - utils/initCounters.js : Initialise les compteurs au démarrage du serveur.

3. Sécurité
   - Tous les endpoints, sauf /api/auth/register et /api/auth/login, nécessitent un token JWT valide.

## Notes pour les Développeurs

- Initialisez les compteurs au démarrage du serveur.
- Les IDs sont automatiquement générés et incrémentés lors de la création de nouveaux documents.
- Mettez à jour toutes les références aux IDs dans le code existant pour refléter le nouveau format numérique.
- Assurez-vous que les relations entre les modèles (par exemple, entre Order et Payment) utilisent correctement les nouveaux IDs numériques.
